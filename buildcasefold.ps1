# Read the casefolding.txt from the Unicode Character Database and convert them into a C# source file.
# The casefolding.txt file is available at http://www.unicode.org/Public/UNIDATA/CaseFolding.txt

# The casefolding.txt file is in the following format:
# <code>; <status>; <mapping>; # <name>
# where
# <code> is the code point of the character in 4 to 6 hexadecimal digits
# <status> is one of C, F, S, T
# <mapping> is the code point of the mapping in 4 to 6 hexadecimal digits
# <name> is the name of the character

# The C# source file is in the following format:
# public static readonly int[] CaseFolding = new Dictionary<int, int[]> {
#   { <code>, new[] { <mapping> } },
#   ...
# };

param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]$InputFile,

    [Parameter(Mandatory=$true, Position=1)]
    [string]$OutputFile

)

$caseFolding = @{}
Get-Content $InputFile | ForEach-Object {
    # Remove everything after the comment
    $line = ($_ -split "#", 2)[0]
    # Trim the line
    $line = $line.Trim()
    # Skip empty lines
    if ($line.Length -eq 0) {
        return
    }

    # Split the line into fields
    $fields = $line -split ';'
    # Skip lines that don't have 4 fields
    if ($fields.Length -ne 4) {
        return
    }
    $targetPoints = $fields[2].Trim() -split ' '
    $caseFolding[$fields[0].Trim()] = @{ Value = $targetPoints; Category = $fields[1].Trim() }
}

$class = "
// This file is generated by buildcasefold.ps1
using System.Collections.Generic;

namespace EinsTools.Utilities.StringHelper;

internal class UnicodePoint {
    public int CodePoint { get; } 
    public string Category { get; }
    public int[] Value { get; }

    public UnicodePoint(int codePoint, string category, int[] value) {
        CodePoint = codePoint;
        Category = category;
        Value = value;
    }
}

internal static partial class CharUnicodeInfo
{
    public static readonly Dictionary<int, UnicodePoint> CaseFolding = new Dictionary<int, UnicodePoint> {
"

$caseFolding.GetEnumerator() | ForEach-Object {
    $targetString = $_.Value.Value -join ", 0x"
    $class += "        { 0x$($_.Key), new UnicodePoint(0x$($_.Key), ""$($_.Value.Category)"",  new[] { 0x$($targetString) }) },`r`n"
}

$class += "
    };
}
"

$class | Out-File $OutputFile -Encoding utf8 -Force

